<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2018%2F06%2F13%2F%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85SS%2F</url>
    <content type="text"><![CDATA[远程服务器安装SS给远程服务器初始化密码sudo passwd root 进入root用户su 然后输入密码 安装 wget管理工具yum install wget 使用秋水逸冰的安装脚本wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/ shadowsocks_install/master/shadowsocks-all.sh chmod +x shadowsocks-all.sh ./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log 这里选择 3 进行安装 根据提示分别输入 密码 端口号 加密方式 这时候ss服务已经能够使用 如何使用ssh登录远程服务器首先将自己的ssh公钥加入客户端的元数据管理这里以google 云为例 这里要记住前面的用户名 进入root用户下su 编辑ssh配置文件vi /etc/ssh/sshd_config 修改以下内容PermitRootLogin yes PasswordAuthentication yes 重启 sshservice sshd restart 重启远程服务器reboot 在本地客户端使用ssh命令ssh [username]@[ip] 这样即可连入远程服务器]]></content>
  </entry>
  <entry>
    <title><![CDATA[OC中的指针]]></title>
    <url>%2F2018%2F05%2F29%2FOC%E4%B8%AD%E7%9A%84%E6%8C%87%E9%92%88%20*%2F</url>
    <content type="text"><![CDATA[OC中的指针 *c语言中的指针平时我们可能会进行这样的操作 int a =10; change(a); void change(int a){ a =20 } 这样毫无疑问，a的值是没有变化的因为函数是进行了值copy，这个时候的a是一个临时变量我们可以通过打印地址看到 int a =10; change(a); NSLog(@&quot;%p&quot;,&amp;a); void change(int a){ a =20 NSLog(@&quot;%p&quot;,&amp;a); } 打印结果显示 pointer[18495:657032] 0x7ffee0fd5a2c pointer[18495:657032] 0x7ffee0fd5a0c 所以我们如果想改变原来的值就需要把a的地址传进去，进而修改原来的值 int a =10; change(&amp;a); void change(int *a){ *a =20 } 其实所有的地址都好比是门牌号，而变量的类型只是象征着这个地址存的值的类型，它告诉编译器应该去读这个变量后的多少空间的值。 OC中的指针OC中的对象一般都是用标识的，例如(NSArray ) (NSString ) (NSObject )…… 所以我们平时在操作对象的时候其实都是在操作指针来完成我们的行为。 例如我们有这样一个类StudentStudent有一个copy的name属性 Student *s = [Student new]; changeStudent(s); NSLog(@&quot;%@,s.name&quot;); void changeStudent(Student *s){ s.name = @&quot;tony&quot;; } 这个时候s的name是有值的 如果我们这么操作 Student *s = [Student new]; changeStudent(s); NSLog(@&quot;%@,s.name&quot;); void changeStudent(Student *s){ Student *sNew = [Student new]; s = sNew; } 这个时候s的name没有值 我们可以从指针关系来看这个问题 Student *s = [Student new]; NSLog(@&quot;1---%p--------%p&quot;,&amp;s,s); changeStudent(s); NSLog(@&quot;4---%p--------%p&quot;,&amp;s,s); NSLog(@&quot;%@,s.name&quot;); void changeStudent(Student *s){ NSLog(@&quot;2---%p--------%p&quot;,&amp;s,s); Student *sNew = [Student new]; s = sNew; NSLog(@&quot;3----%p--------%p&quot;,&amp;s,s); } 这个时候打印为 1---0x7ffeea064a28--------0x604000005de0 2---0x7ffeea0649d8--------0x604000005de0 3---0x7ffeea0649d8--------0x600000000530 4---0x7ffeea064a28--------0x604000005de0 由此可见，当变量传入函数时候只是值传递，函数会生成一个临时变量去接收这个值。 C和OC中指针C语言中指针变量需要明确表示，当我们要取值时候则需要用明确的标识 int a =10; int *p = &amp;a; 这个时候如果想得到a的值 需要用*p 去取 OC中的指针一般表示对象，我们通常用对象操作各种行为。 当我们通过对象获取属性或者执行方法时，也就是通过这个指针获取偏移得到结果]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ps人物肤色美白]]></title>
    <url>%2F2018%2F05%2F14%2Fps%E4%BA%BA%E7%89%A9%E8%82%A4%E8%89%B2%E7%BE%8E%E7%99%BD%2F</url>
    <content type="text"><![CDATA[ps人物肤色美白褪色command + j 复制一层图层 选择可选颜色 选择红的 退黑色 绝对 选择黄色 退黑色 绝对 command + i 反向， 用白色擦 美白高光部分提亮 command option shift 2 点击曲线 曲线拉高 control g 建组 蒙版 control I 反向 涂皮肤部分 色彩统一选择色相饱和度 着色 调整色相 饱和度 不透明度 control I 反向 涂皮肤部分 感觉色相 不一样可以调整不透明度 人物肤色美白 二选择通道混合器 单色 调整不透明度 复制图层 改变混合模式 滤色 调整不透明度 复制图层 改变混合模式 柔光 改变不透明 3个图层合并一个组 添加蒙版，填充黑色 选择画笔 涂抹肤色 除去嘴唇眼睛 调整不透明度 整体]]></content>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Pod私有库更新版本]]></title>
    <url>%2F2018%2F05%2F14%2FPod%E7%A7%81%E6%9C%89%E5%BA%93%E6%9B%B4%E6%96%B0%2F</url>
    <content type="text"><![CDATA[Pod私有库更新版本项目到后期需要更好的架构，有时候我们选择私有库，当私有库需要更新版本时候我们则需要执行以下操作 修改本地podspec里面版本号执行 git add . git commint -m &apos;版本号&apos; git push git tag -a 版本号 -m&quot;version 版本号&quot; //打tag git push --tag //远程打tag 然后需要验证podspec是否能够编译通过pod lib lint --allow-warnings //忽略警告验证 最后验证通过后pod repo push 你的本地库名字 你的库.podspec --allow-warnings]]></content>
      <tags>
        <tag>通用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cocoapods安装第三方后头文件无法智能提示]]></title>
    <url>%2F2018%2F05%2F10%2Fcocoapods%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E5%90%8E%E5%A4%B4%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E6%99%BA%E8%83%BD%E6%8F%90%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[问题发现时间最近在看关于私有库问题，发现自己的私有库在安装后无法获得头文件提示，库已经安装但是在文件里面却无法使用。 解决方案需要修改xcode3个地方配置即可正常使用 一在项目的targets中选择Build Setting 全局搜索 User Heather在找到的栏目中增加两项 ${SRCROOT} //并在后面选择 recursive 有此项则可以通过包访问例如#import&lt;A/A.h&gt; $(PODS_ROOT) //并在后面选择 recursive 这样可以直接使用引号加载 例如 #import&quot;A.h&quot; 二在项目project中选择Configurations 分别修改项目配置none为pods-pod.debug 和pods-pod.release 三如果此时项目中还无法找到头文件则可以先强制写出头文件，编译通过后即可正常使用 猜想是因为没有加载到内存中，需要编译一次才能加载到内存中使用]]></content>
      <tags>
        <tag>通用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[完美解决苹果需要完善手机号却又因为密码提示问题忘记无法进入的问题]]></title>
    <url>%2F2018%2F04%2F18%2F%E8%A7%A3%E5%86%B3%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91%E8%80%85%E6%89%8B%E6%9C%BA%E5%8F%B7%E4%BF%A1%E6%81%AF%E5%AE%8C%E5%96%84%2F</url>
    <content type="text"><![CDATA[问题发生的时间4月16号周一时候，当我打开itunes进行发版时候。我发现了一个红色警告，需要完善手机号才能进行发版。可是在进行完善手机号的过程中，发现又要回答安全提示问题，可是提示问题又忘了，所以无法进行发版。 解决方案用手机登录开发者账号appid，然后进入设置，点击头像那列，然后点击“姓名，电话号码，电子邮件”，然后编辑联系方式，添加一个新的可用手机号，然后再回开发者中心，同意协议就可以了。 思考由于是开发者，所以思维定式的认为只能从网站这严谨的流程去解决问题，但是由于手机号是苹果id的信息，所以又可以从苹果id账号中去完善。 当遇到问题时候，要想到问题关联性，不能只通过一种途径去解决问题，而是要想到问题所发生的所有场景，这样才能发现另外的解决方案。]]></content>
      <tags>
        <tag>通用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[itunes12.7.0 以上降级到12.6.2版本]]></title>
    <url>%2F2018%2F04%2F15%2Fitunes%E9%99%8D%E7%BA%A7%2F</url>
    <content type="text"><![CDATA[itunes升级到12.7.0以上后会出现App Store消失，itunes应用模块消失，这个问题MAC用户先下载12.6版本的itunes地址 https://support.apple.com/zh_CN/downloads/itunes 下载后如果你的itunes版本过高会提示无法安装 删除现在的itunes命令行输入 sudo rm -rf /Applications/iTunes.app 输入密码后手动删除 /Users/m1（指你的用户名）/Music/iTunes 下面除了iTunes Media以为的所有文件 然后就可以安装旧版本的iTunes了 你会发现应用模块已经回来了]]></content>
      <tags>
        <tag>通用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手把手教你使用hexo在MAC上搭建个人博客]]></title>
    <url>%2F2018%2F04%2F14%2Ftitle-%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8hexo%E5%9C%A8MAC%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[一、安装HomebrewHomebrew简称brew，是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件。 1ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" 执行上面命令后会提示输入系统密码，输入密码继续安装如安装成功则会看到：Installation successful! 二、安装node1brew install node 三、通过终端安装hexo博客123456789cd Desktop/mkdir blogcd blognpm install hexo-cli -ghexo init blogcd blognpm installhexo g # 或者hexo generatehexo s # 或者hexo server，可以在http://localhost:4000/ 查看 这里说几个hexo常用命令 hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹 hexo server (hexo s) 启动本地web服务，用于博客的预览 hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台） 另外还有其他几个常用命令： hexo new &quot;postName&quot; #新建文章 hexo new page &quot;pageName&quot; #新建页面 现在我们打开http://localhost:4000/ 已经可以看到一篇内置的blog了。]]></content>
      <tags>
        <tag>通用</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F04%2F14%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
